(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{478:function(s,a,e){s.exports=e.p+"assets/img/single-thread.72726678.png"},479:function(s,a,e){s.exports=e.p+"assets/img/event-loop.9e0f5953.png"},480:function(s,a,e){s.exports=e.p+"assets/img/send-message.2eb6a8ec.png"},481:function(s,a,e){s.exports=e.p+"assets/img/message-queue.6d141ec0.png"},482:function(s,a,e){s.exports=e.p+"assets/img/thread-model.2ac6bc03.png"},483:function(s,a,e){s.exports=e.p+"assets/img/chrome-send-task.e2582e98.png"},484:function(s,a,e){s.exports=e.p+"assets/img/task-execute-too-long.8de4b43f.png"},485:function(s,a,e){s.exports=e.p+"assets/img/Performance.c0d59d5b.png"},530:function(s,a,e){"use strict";e.r(a);var n=e(27),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"单线程处理安排好的任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单线程处理安排好的任务"}},[s._v("#")]),s._v(" 单线程处理安排好的任务")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('void MainThread(){\n     int num1 = 1+2; // 任务 1\n     int num2 = 20/5; // 任务 2\n     int num3 = 7*8; // 任务 3\n     print(" 最终计算的值为:%d,%d,%d",num,num2,num3)； // 任务 4\n  }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("img",{attrs:{src:e(478),alt:"single-thread"}})]),s._v(" "),n("h2",{attrs:{id:"线程运行过程中处理新任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程运行过程中处理新任务"}},[s._v("#")]),s._v(" 线程运行过程中处理新任务")]),s._v(" "),n("p",[s._v("但并不是所有的任务都是在执行之前统一安排好的，大部分情况下，新的任务是在线程运行过程中产生的。比如在线程执行过程中，又接收到了一个新的任务要求计算"),n("code",[s._v("10+2")]),s._v("，那上面那种方式就无法处理这种情况了。")]),s._v(" "),n("p",[s._v("要想在线程运行过程中，能接收并执行新的任务，就需要采用"),n("strong",[s._v("事件循环机制")])]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//GetInput\n// 等待用户从键盘输入一个数字，并返回该输入的数字\nint GetInput(){\n    int input_number = 0;\n    cout<<" 请输入一个数:";\n    cin>>input_number;\n    return input_number;\n}\n\n// 主线程 (Main Thread)\nvoid MainThread(){\n     for(;;){\n          int first_num = GetInput()；\n          int second_num = GetInput()；\n          result_num = first_num + second_num;\n          print(" 最终计算的值为:%d",result_num)；\n      }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("相较于第一版的线程，这一版的线程做了两点改进")]),s._v(" "),n("ul",[n("li",[s._v("第一点引入了循环机制，具体实现方式是在线程语句最后添加了一个"),n("code",[s._v("for")]),s._v(" 循环语句，线程会一直循环执行。")]),s._v(" "),n("li",[s._v("第二点是引入了事件，可以在线程运行过程中，等待用户输入的数字，等待过程中线程处于暂停状态，一旦接收到用户输入的信息，那么线程会被激活，然后执行相加运算，最后输出结果。")])]),s._v(" "),n("p",[s._v("通过引入事件循环机制，就可以让该线程“活”起来了，我们每次输入两个数字，都会打印出两数字相加的结果")]),s._v(" "),n("p",[n("img",{attrs:{src:e(479),alt:"event-loop"}})]),s._v(" "),n("h2",{attrs:{id:"处理其他线程发送过来的任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理其他线程发送过来的任务"}},[s._v("#")]),s._v(" 处理其他线程发送过来的任务")]),s._v(" "),n("p",[s._v("上面我们改进了线程的执行方式，引入了事件循环机制，可以让其在执行过程中接受新的任务。不过在第二版的线程模型中，所有的任务都是来自于线程内部的，如果另外一个线程想让主线程执行一个任务，利用第二版的线程模型是无法做到的。")]),s._v(" "),n("p",[s._v("那下面我们就来看看其他线程是如何发送消息给渲染主线程的，具体形式你可以参考下图：\n"),n("img",{attrs:{src:e(480),alt:"send-message"}})]),s._v(" "),n("p",[s._v("从上图可以看出，渲染主线程会频繁接收到来自于 "),n("code",[s._v("IO")]),s._v("线程的一些任务，接收到这些任务之后，渲染进程就需要着手处理，比如接收到资源加载完成的消息后，渲染进程就要着手进行 "),n("code",[s._v("DOM")]),s._v(" 解析了；接收到鼠标点击的消息后，渲染主线程就要开始执行相应的"),n("code",[s._v("JavaScript")]),s._v("脚本来处理该点击事件。")]),s._v(" "),n("p",[s._v("那么如何设计好一个线程模型，能让其能够接收其他线程发送的消息呢？\n一个通用模式是使用"),n("strong",[s._v("消息队列")]),s._v("。在解释如何实现之前，我们先说说什么是消息队列，可以参考下图：\n"),n("img",{attrs:{src:e(481),alt:"message-queue"}})]),s._v(" "),n("p",[n("strong",[s._v("消息队列")]),s._v("是一种数据结构，可以存放要执行的任务。它符合队列"),n("strong",[s._v("先进先出")]),s._v("的特点，也就是说要添加任务的话，添加到队列的尾部；要取出任务的话，从队列头部去取。\n有了队列之后，我们就可以继续改造线程模型了，改造方案如下图所示：\n"),n("img",{attrs:{src:e(482),alt:"thread-model"}})]),s._v(" "),n("p",[s._v("从上图可以看出，我们的改造可以分为下面三个步骤：")]),s._v(" "),n("ol",[n("li",[s._v("添加一个消息队列；")]),s._v(" "),n("li",[n("code",[s._v("IO")]),s._v("线程中产生的新任务添加进消息队列尾部；")]),s._v(" "),n("li",[s._v("渲染主线程会循环地从消息队列头部中读取任务，执行任务。")])]),s._v(" "),n("p",[s._v("有了这些步骤之后，那么接下来我们就可以按步骤使用代码来实现第三版的线程模型。")]),s._v(" "),n("p",[s._v("首先，构造一个队列。")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class TaskQueue{\n  public:\n  Task takeTask(); // 取出队列头部的一个任务\n  void pushTask(Task task); // 添加一个任务到队列尾部\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("改造主线程，让主线程从队列中读取任务：")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("TaskQueue task_queue；\nvoid ProcessTask();\nvoid MainThread(){\n  for(;;){\n    Task task = task_queue.takeTask();\n    ProcessTask(task);\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("在上面的代码中，我们添加了一个消息队列的对象，然后在主线程的"),n("code",[s._v("for")]),s._v(" 循环代码块中，从消息队列中读取一个任务，然后执行该任务，主线程就这样一直循环往下执行，因此只要消息队列中有任务，主线程就会去执行。")]),s._v(" "),n("p",[s._v("主线程执行的任务全部从消息队列中获取。如果有其他线程想要发送任务让主线程去执行，只需要将任务添加到该消息队列中就可以了，添加任务的代码如下：")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Task clickTask;\ntask_queue.pushTask(clickTask)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("由于是多个线程操作同一个消息队列，所以在添加任务和取出任务时还会加上一个同步锁")]),s._v(" "),n("h2",{attrs:{id:"处理其他进程发送过来的任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理其他进程发送过来的任务"}},[s._v("#")]),s._v(" 处理其他进程发送过来的任务")]),s._v(" "),n("p",[s._v("通过使用消息队列，实现了线程之间的消息通信。在 "),n("code",[s._v("Chrome")]),s._v(" 中，跨进程之间的任务也是频繁发生的，那么如何处理其他进程发送过来的任务？\n"),n("img",{attrs:{src:e(483),alt:"chrome-send-task"}})]),s._v(" "),n("p",[s._v("渲染进程专门有一个 "),n("code",[s._v("IO")]),s._v("线程用来接收其他进程传进来的消息，接收到消息之后，会将这些消息组装成任务发送给渲染主线程，后续的步骤就和前面处理其他线程发送的任务一样了")]),s._v(" "),n("h2",{attrs:{id:"消息队列中的任务类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息队列中的任务类型"}},[s._v("#")]),s._v(" 消息队列中的任务类型")]),s._v(" "),n("p",[s._v("消息队列中的任务包含了很多内部消息类型，如"),n("code",[s._v("输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript 定时器")]),s._v("等等。还包含了很多与页面相关的事件，如 "),n("code",[s._v("JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画")]),s._v("等。")]),s._v(" "),n("p",[s._v("以上这些事件都是在主线程中执行的，所以在编写 "),n("code",[s._v("Web")]),s._v(" 应用时，你还需要衡量这些事件所占用的时长，并想办法解决单个任务占用主线程过久的问题。")]),s._v(" "),n("h2",{attrs:{id:"如何安全退出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何安全退出"}},[s._v("#")]),s._v(" 如何安全退出")]),s._v(" "),n("p",[s._v("当页面主线程执行完成之后，"),n("code",[s._v("Chrome")]),s._v("确定要退出当前页面时，页面主线程会设置一个退出标志的变量，在每次执行完一个任务时，判断是否有设置退出标志。")]),s._v(" "),n("p",[s._v("如果设置了，那么就直接中断当前的所有任务，退出线程，你可以参考下面代码：")]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("TaskQueue task_queue；\nvoid ProcessTask();\nbool keep_running = true;\nvoid MainThread(){\n  for(;;){\n    Task task = task_queue.takeTask();\n    ProcessTask(task);\n    if(!keep_running) // 如果设置了退出标志，那么直接退出线程循环\n        break;\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"页面使用单线程的缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#页面使用单线程的缺点"}},[s._v("#")]),s._v(" 页面使用单线程的缺点")]),s._v(" "),n("p",[s._v("页面线程所有执行的任务都来自于消息队列。消息队列是"),n("strong",[s._v("先进先出")]),s._v("的属性，也就是说放入队列中的任务，需要等待前面的任务被执行完，才会被执行。鉴于这个属性，就有如下两个问题需要解决。")]),s._v(" "),n("h3",{attrs:{id:"_1-如何处理高优先级的任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何处理高优先级的任务"}},[s._v("#")]),s._v(" 1. 如何处理高优先级的任务")]),s._v(" "),n("p",[s._v("比如一个典型的场景是监控 "),n("code",[s._v("DOM")]),s._v(" 节点的变化情况（节点的插入、修改、删除等动态变化），然后根据这些变化来处理相应的业务逻辑。一个通用的设计的是，利用 "),n("code",[s._v("JavaScript")]),s._v("设计一套监听接口，当变化发生时，渲染引擎同步调用这些接口，这是一个典型的观察者模式。")]),s._v(" "),n("p",[s._v("不过这个模式有个问题，因为 "),n("code",[s._v("DOM 变")]),s._v("化非常频繁，如果每次发生变化的时候，都直接调用相应的 "),n("code",[s._v("JavaScript")]),s._v("接口，那么这个当前的任务执行时间会被拉长，从而导致执行效率的下降。")]),s._v(" "),n("p",[s._v("如果将这些 "),n("code",[s._v("DOM")]),s._v(" 变化做成异步的消息事件，添加到消息队列的尾部，那么又会影响到监控的实时性，因为在添加到消息队列的过程中，可能前面就有很多任务在排队了。")]),s._v(" "),n("p",[s._v("这也就是说，如果"),n("code",[s._v("DOM")]),s._v(" 发生变化，采用同步通知的方式，会影响当前任务的执行效率；如果采用异步方式，又会影响到监控的实时性。")]),s._v(" "),n("p",[s._v("那该如何权衡效率和实时性呢？")]),s._v(" "),n("p",[s._v("针对这种情况，微任务就应用而生了，下面我们来看看微任务是如何权衡效率和实时性的。")]),s._v(" "),n("p",[s._v("通常我们把消息队列中的任务称为"),n("strong",[s._v("宏任务")]),s._v("，每个宏任务中都包含了一个"),n("strong",[s._v("微任务队列")]),s._v("，在执行宏任务的过程中，如果 "),n("code",[s._v("DOM")]),s._v("有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了执行效率的问题。")]),s._v(" "),n("p",[s._v("等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的微任务，因为 "),n("code",[s._v("DOM")]),s._v(" 变化的事件都保存在这些微任务队列中，这样也就解决了实时性问题。")]),s._v(" "),n("h3",{attrs:{id:"_2-如何解决单个任务执行时长过久的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何解决单个任务执行时长过久的问题"}},[s._v("#")]),s._v(" 2. 如何解决单个任务执行时长过久的问题")]),s._v(" "),n("p",[s._v("因为所有的任务都是在单线程中执行的，所以每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。可以参考下图：\n"),n("img",{attrs:{src:e(484),alt:"task-execute-too-long"}})]),s._v(" "),n("p",[s._v("如果在执行动画过程中，其中有个 "),n("code",[s._v("JavaScript")]),s._v(" 任务因执行时间过久，占用了动画单帧的时间，这样会给用户制造了卡顿的感觉，这当然是极不好的用户体验。针对这种情况，"),n("code",[s._v("JavaScript")]),s._v("可以通过回调功能来规避这种问题，也就是让要执行的 "),n("code",[s._v("JavaScript")]),s._v(" 任务滞后执行")]),s._v(" "),n("h2",{attrs:{id:"浏览器页面是如何运行的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器页面是如何运行的"}},[s._v("#")]),s._v(" 浏览器页面是如何运行的")]),s._v(" "),n("p",[n("img",{attrs:{src:e(485),alt:"Performance"}}),s._v("\n从图中可以看出，点击展开了 "),n("code",[s._v("Main")]),s._v(" 这个项目，其记录了主线程执行过程中的所有任务。图中灰色的就是一个个任务，每个任务下面还有子任务，其中的"),n("code",[s._v("Parse HTML")]),s._v("任务，是把 "),n("code",[s._v("HTML")]),s._v("解析为 "),n("code",[s._v("DOM")]),s._v("的任务。值得注意的是，在执行 "),n("code",[s._v("Parse HTML")]),s._v(" 的时候，如果遇到 "),n("code",[s._v("JavaScript")]),s._v(" 脚本，那么会暂停当前的"),n("code",[s._v("HTML")]),s._v(" 解析而去执行 "),n("code",[s._v("JavaScript")]),s._v(" 脚本。")])])}),[],!1,null,null,null);a.default=t.exports}}]);