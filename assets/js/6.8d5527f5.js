(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{465:function(s,t,a){s.exports=a.p+"assets/img/stack-GC.45ddbe30.png"},466:function(s,t,a){s.exports=a.p+"assets/img/ESP.b1f05732.png"},467:function(s,t,a){s.exports=a.p+"assets/img/ESP-global.e80ff553.png"},468:function(s,t,a){s.exports=a.p+"assets/img/Scavenge.4f9310c7.png"},469:function(s,t,a){s.exports=a.p+"assets/img/mark.6c8361d3.png"},470:function(s,t,a){s.exports=a.p+"assets/img/Sweep.d015db8a.png"},471:function(s,t,a){s.exports=a.p+"assets/img/Compact.652bd2df.png"},472:function(s,t,a){s.exports=a.p+"assets/img/Stop-The-World-1.9898646a.png"},533:function(s,t,a){"use strict";a.r(t);var n=a(27),v=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"不同语言的垃圾回收策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同语言的垃圾回收策略"}},[s._v("#")]),s._v(" 不同语言的垃圾回收策略")]),s._v(" "),n("p",[s._v("垃圾数据回收分为"),n("strong",[s._v("手动回收")]),s._v("和"),n("strong",[s._v("自动回收")]),s._v("两种策略。")]),s._v(" "),n("p",[s._v("如 "),n("code",[s._v("C/C++")]),s._v(" 就是使用手动回收策略，何时分配内存、何时销毁内存都是由代码控制的")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆中分配内存")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2048")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆空间中分配 2048 字节的空间，并将分配后的引用地址保存到 p 中")]),s._v("\n\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 p 指向的内存")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//....")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用结束后，销毁这段内存")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\np "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),s._v("；\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("从上面这段 "),n("code",[s._v("C")]),s._v("代码可以看出来，要使用堆中的一块空间，我们需要先调用 "),n("code",[s._v("mallco")]),s._v("函数分配内存，然后再使用；当不再需要这块数据的时候，就要手动调用 "),n("code",[s._v("free")]),s._v(" 函数来释放内存。如果这段数据已经不再需要了，但是又没有主动调用 "),n("code",[s._v("free")]),s._v(" 函数来销毁，那么这种情况就被称为"),n("strong",[s._v("内存泄漏")]),s._v("。")]),s._v(" "),n("p",[s._v("JavaScript、Java、Python 等语言使用的是自动垃圾回收的策略，产生的垃圾数据是由垃圾回收器来释放的，并不需要手动通过代码来释放。")]),s._v(" "),n("h2",{attrs:{id:"栈中的垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈中的垃圾回收"}},[s._v("#")]),s._v(" 栈中的垃圾回收")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 极客邦 "')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("showName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 极客时间 "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 极客时间 "')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("showName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("当执行到第 "),n("code",[s._v("6")]),s._v("行代码时，调用栈和堆空间状态图：\n"),n("img",{attrs:{src:a(465),alt:"stack-GC"}})]),s._v(" "),n("p",[s._v("当函数执行结束之后,执行上下文是怎么被销毁的呢?")]),s._v(" "),n("p",[s._v("在调用栈中,有一个记录当前执行状态的指针（称为"),n("code",[s._v("ESP")]),s._v("），指向调用栈中 正在执行的执行上下文")]),s._v(" "),n("p",[s._v("当 "),n("code",[s._v("showName")]),s._v(" 函数执行完成之后，函数执行流程就进入了 "),n("code",[s._v("foo")]),s._v("函数，这时"),n("code",[s._v("JavaScript")]),s._v("引擎 会将 "),n("code",[s._v("ESP")]),s._v(" 下移到"),n("code",[s._v("foo")]),s._v("函数的执行上下文，这个下移操作就是销毁"),n("code",[s._v("showName")]),s._v(" 函数执行上下文的过程。\n"),n("img",{attrs:{src:a(466),alt:"ESP"}})]),s._v(" "),n("h2",{attrs:{id:"堆中的垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#堆中的垃圾回收"}},[s._v("#")]),s._v(" 堆中的垃圾回收")]),s._v(" "),n("p",[s._v("当"),n("code",[s._v("foo")]),s._v("函数执行结束之后，"),n("code",[s._v("ESP")]),s._v(" 指向了全局执行上下文，虽然销毁了栈中的执行上下文,但是保存在堆中的两个对象依然占用着空间\n"),n("img",{attrs:{src:a(467),alt:"ESP-global"}})]),s._v(" "),n("p",[s._v("要回收堆中的垃圾数据，就需要用到 "),n("code",[s._v("JavaScript")]),s._v("中的垃圾回收器了。")]),s._v(" "),n("p",[s._v("通过"),n("code",[s._v("Chrome")]),s._v(" 的"),n("code",[s._v("JavaScript")]),s._v(" 引擎"),n("code",[s._v("V8")]),s._v(" 来分析下堆中的垃圾数据是如何回收的。")]),s._v(" "),n("h3",{attrs:{id:"代际假说和分代收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代际假说和分代收集"}},[s._v("#")]),s._v(" 代际假说和分代收集")]),s._v(" "),n("p",[s._v("代际假说（"),n("code",[s._v("The Generational Hypothesis")]),s._v("）有以下两个特点")]),s._v(" "),n("ul",[n("li",[s._v("大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问")]),s._v(" "),n("li",[s._v("不死的对象，会活得更久")])]),s._v(" "),n("p",[s._v("在 "),n("code",[s._v("V8")]),s._v(" 中会把堆分为"),n("strong",[s._v("新生代")]),s._v("和"),n("strong",[s._v("老生代")]),s._v("两个区域，"),n("strong",[s._v("新生代")]),s._v("中存放的是生存时间短的对象，"),n("strong",[s._v("老生代")]),s._v("中存放的生存时间久的对象。")]),s._v(" "),n("p",[s._v("***通常只支持"),n("code",[s._v("1～8M")]),s._v("的容量，而老生区支持的容量就大很多了。对于这两块区域，"),n("code",[s._v("V8")]),s._v("分别使用两个不同的垃圾回收器，以便更高效地实施垃圾回收。")]),s._v(" "),n("ul",[n("li",[s._v("副垃圾回收器，主要负责新生代的垃圾回收。")]),s._v(" "),n("li",[s._v("主垃圾回收器，主要负责老生代的垃圾回收。")])]),s._v(" "),n("h3",{attrs:{id:"垃圾回收器的工作流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的工作流程"}},[s._v("#")]),s._v(" 垃圾回收器的工作流程")]),s._v(" "),n("ol",[n("li",[s._v("标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。")]),s._v(" "),n("li",[s._v("回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。")]),s._v(" "),n("li",[s._v("内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为内存碎片。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。")])]),s._v(" "),n("h3",{attrs:{id:"副垃圾回收器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#副垃圾回收器"}},[s._v("#")]),s._v(" 副垃圾回收器")]),s._v(" "),n("p",[s._v("副垃圾回收器主要负责新生区的垃圾回收。而通常情况下，大多数小的对象都会被分配到新生区，虽然说这个区域不大，但是垃圾回收比较频繁。")]),s._v(" "),n("p",[s._v("新生代中用"),n("code",[s._v("Scavenge")]),s._v("算法来处理。所谓 "),n("code",[s._v("Scavenge")]),s._v(" 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域\n"),n("img",{attrs:{src:a(468),alt:"Scavenge"}})]),s._v(" "),n("p",[s._v("新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。\n在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。\n完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。\n由于新生代中采用的 "),n("code",[s._v("Scavenge")]),s._v(" 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。")]),s._v(" "),n("p",[s._v("也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，"),n("code",[s._v("JavaScript")]),s._v("引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")]),s._v(" "),n("h3",{attrs:{id:"主垃圾回收器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主垃圾回收器"}},[s._v("#")]),s._v(" 主垃圾回收器")]),s._v(" "),n("p",[s._v("主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。")]),s._v(" "),n("p",[s._v("由于老生区的对象比较大，若要在老生区中使用 "),n("code",[s._v("Scavenge")]),s._v(" 算法进行垃圾回收，复制这些大的对象将会花费比较多的时间，从而导致回收执行效率不高，同时还会浪费一半的空间。因而，主垃圾回收器是采用标记 - 清除（"),n("code",[s._v("Mark-Sweep")]),s._v("）的算法进行垃圾回收的。")]),s._v(" "),n("p",[s._v("首先是标记过程阶段。标记阶段就是从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为活动对象，没有到达的元素就可以判断为垃圾数据。")]),s._v(" "),n("p",[s._v("比如最开始的那段代码，当 "),n("code",[s._v("showName")]),s._v(" 函数执行退出之后，这段代码的调用栈和堆空间如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(469),alt:"mark"}})]),s._v(" "),n("p",[s._v("当 "),n("code",[s._v("showName")]),s._v("函数执行结束之后，"),n("code",[s._v("ESP")]),s._v(" 向下移动，指向了"),n("code",[s._v("foo")]),s._v(" 函数的执行上下文，这时候如果遍历调用栈，是不会找到引用 "),n("code",[s._v("1003")]),s._v(" 地址的变量，也就意味着"),n("code",[s._v("1003")]),s._v("这块数据为垃圾数据，被标记为红色。由于 "),n("code",[s._v("1050")]),s._v(" 这块数据被变量"),n("code",[s._v("b")]),s._v("引用了，所以这块数据会被标记为活动对象。这就是大致的标记过程。")]),s._v(" "),n("p",[s._v("接下来就是垃圾的清除过程。它和副垃圾回收器的垃圾清除过程完全不同,可参考下图大致理解下其清除过程：\n"),n("img",{attrs:{src:a(470),alt:"Sweep"}})]),s._v(" "),n("p",[s._v("上面的标记过程和清除过程就是标记 - 清除算法，不过对一块内存多次执行标记 - 清除算法后，会产生大量不连续的内存碎片。而碎片过多会导致大对象无法分配到足够的连续内存，于是又产生了另外一种算法——标记 - 整理（"),n("code",[s._v("Mark-Compact")]),s._v("），这个标记过程仍然与标记 - 清除算法里的是一样的，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存\n"),n("img",{attrs:{src:a(471),alt:"Compact"}})]),s._v(" "),n("h3",{attrs:{id:"全停顿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全停顿"}},[s._v("#")]),s._v(" 全停顿")]),s._v(" "),n("p",[n("code",[s._v("V8")]),s._v(" 是使用副垃圾回收器和主垃圾回收器处理垃圾回收的，不过由于 "),n("code",[s._v("JavaScript")]),s._v(" 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 "),n("code",[s._v("JavaScript")]),s._v(" 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿（"),n("code",[s._v("Stop-The-World")]),s._v("）。")]),s._v(" "),n("p",[s._v("比如堆中的数据有 "),n("code",[s._v("1.5GB")]),s._v("，"),n("code",[s._v("V8")]),s._v(" 实现一次完整的垃圾回收需要 "),n("code",[s._v("1")]),s._v(" 秒以上的时间，这也是由于垃圾回收而引起 "),n("code",[s._v("JavaScript")]),s._v("线程暂停执行的时间，若是这样的时间花销，那么应用的性能和响应能力都会直线下降。主垃圾回收器执行一次完整的垃圾回收流程如下图所示：\n"),n("img",{attrs:{src:a(472),alt:"Stop-The-World"}}),s._v("\n在 "),n("code",[s._v("V8")]),s._v("新生代的垃圾回收中，因其空间较小，且存活对象较少，所以全停顿的影响不大，但老生代就不一样了。如果在执行垃圾回收的过程中，占用主线程时间过久，就像上面图片展示的那样，花费了 "),n("code",[s._v("200")]),s._v("毫秒，在这 "),n("code",[s._v("200")]),s._v(" 毫秒内，主线程是不能做其他事情的。比如页面正在执行一个 "),n("code",[s._v("JavaScript")]),s._v(" 动画，因为垃圾回收器在工作，就会导致这个动画在这 "),n("code",[s._v("200")]),s._v(" 毫秒内无法执行的，这将会造成页面的卡顿现象。")]),s._v(" "),n("p",[s._v("为了降低老生代的垃圾回收而造成的卡顿，"),n("code",[s._v("V8")]),s._v("将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 "),n("code",[s._v("JavaScript")]),s._v("应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为增量标记（"),n("code",[s._v("Incremental Marking")]),s._v("）算法")]),s._v(" "),n("p",[s._v("使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 "),n("code",[s._v("JavaScript")]),s._v("任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。")])])}),[],!1,null,null,null);t.default=v.exports}}]);