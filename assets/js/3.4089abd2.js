(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{421:function(t,s,a){t.exports=a.p+"assets/img/render-pipeline.9259f873.png"},422:function(t,s,a){t.exports=a.p+"assets/img/tree.fcad0a4e.png"},423:function(t,s,a){t.exports=a.p+"assets/img/dom-tree.125849ec.png"},424:function(t,s,a){t.exports=a.p+"assets/img/document.47f57c3e.png"},425:function(t,s,a){t.exports=a.p+"assets/img/styleSheets.8ec7d5ec.png"},426:function(t,s,a){t.exports=a.p+"assets/img/css-standard.1252c6d3.png"},427:function(t,s,a){t.exports=a.p+"assets/img/inherit.fe9a0ea8.png"},428:function(t,s,a){t.exports=a.p+"assets/img/element.88a3aac4.png"},429:function(t,s,a){t.exports=a.p+"assets/img/computed-style.d87415b0.png"},430:function(t,s,a){t.exports=a.p+"assets/img/layout-tree.8e48b77d.png"},431:function(t,s,a){t.exports=a.p+"assets/img/layer.e8a7e60a.png"},432:function(t,s,a){t.exports=a.p+"assets/img/stacking-context.a03eb120.png"},433:function(t,s,a){t.exports=a.p+"assets/img/draw.40825a55.png"},434:function(t,s,a){t.exports=a.p+"assets/img/draw-list.303515c2.png"},435:function(t,s,a){t.exports=a.p+"assets/img/compound.46d33b6e.png"},436:function(t,s,a){t.exports=a.p+"assets/img/viewport.24222511.png"},437:function(t,s,a){t.exports=a.p+"assets/img/tile.bcc7f698.png"},438:function(t,s,a){t.exports=a.p+"assets/img/raster-thread-pool.d8d77356.png"},439:function(t,s,a){t.exports=a.p+"assets/img/render-gpu.a8d954cd.png"},440:function(t,s,a){t.exports=a.p+"assets/img/full-render-pipeline.975fcbf7.png"},441:function(t,s,a){t.exports=a.p+"assets/img/reset.b3ed5652.png"},442:function(t,s,a){t.exports=a.p+"assets/img/redraw.3c1b7310.png"},443:function(t,s,a){t.exports=a.p+"assets/img/synthesis.024bf6c8.png"},502:function(t,s,a){"use strict";a.r(s);var e=a(27),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("渲染模块在执行过程中会被划分为很多子阶段，输入的 "),e("code",[t._v("HTML")]),t._v("经过这些子阶段，最后输出像素。我们把这样的一个处理流程叫做"),e("code",[t._v("渲染流水线")]),t._v(" "),e("img",{attrs:{src:a(421),alt:"render-pipeline"}})]),t._v(" "),e("p",[t._v("按照渲染的时间顺序，流水线可分为如下几个子阶段：")]),t._v(" "),e("ul",[e("li",[t._v("构建 "),e("code",[t._v("DOM")]),t._v("树")]),t._v(" "),e("li",[t._v("样式计算("),e("code",[t._v("Recalculate Style")]),t._v(")")]),t._v(" "),e("li",[t._v("布局阶段")]),t._v(" "),e("li",[t._v("分层")]),t._v(" "),e("li",[t._v("绘制")]),t._v(" "),e("li",[t._v("分块")]),t._v(" "),e("li",[t._v("光栅化")]),t._v(" "),e("li",[t._v("合成")])]),t._v(" "),e("p",[t._v("每个阶段都需要关注三点内容:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("输入的内容")])]),t._v(" "),e("li",[e("strong",[t._v("处理过程")])]),t._v(" "),e("li",[e("strong",[t._v("输出内容")])])]),t._v(" "),e("h2",{attrs:{id:"构建-dom树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom树"}},[t._v("#")]),t._v(" 构建 "),e("code",[t._v("DOM")]),t._v("树")]),t._v(" "),e("p",[t._v("浏览器无法直接理解和使用 "),e("code",[t._v("HTML")]),t._v("，所以需要将"),e("code",[t._v("HTML")]),t._v(" 转换为浏览器能够理解的结构——"),e("code",[t._v("DOM")]),t._v(" 树。")]),t._v(" "),e("blockquote",[e("p",[t._v("树结构")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(422),alt:"tree"}})]),t._v(" "),e("p",[t._v("树结构中每个点我们称为"),e("code",[t._v("节点")]),t._v("，相连的节点称为"),e("code",[t._v("父子节点")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(423),alt:"dom-tree"}})]),t._v(" "),e("p",[t._v("构建 "),e("code",[t._v("DOM")]),t._v("树的输入内容是一个非常简单的 "),e("code",[t._v("HTML")]),t._v(" 文件，然后经由 "),e("code",[t._v("HTML")]),t._v(" 解析器解析，最终输出树状结构的"),e("code",[t._v("DOM")]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[t._v("控制台里面输入"),e("code",[t._v("document")]),t._v("能看到一个完整的 "),e("code",[t._v("DOM")]),t._v("树结构")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(424),alt:"document"}})]),t._v(" "),e("p",[e("code",[t._v("DOM")]),t._v(" 和"),e("code",[t._v("HTML")]),t._v("内容几乎是一样的，但是和"),e("code",[t._v("HTML")]),t._v(" 不同的是，"),e("code",[t._v("DOM")]),t._v(" 是保存在内存中树状结构，可以通过"),e("code",[t._v("JavaScript")]),t._v(" 来查询或修改其内容。")]),t._v(" "),e("h2",{attrs:{id:"样式计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[t._v("#")]),t._v(" 样式计算")]),t._v(" "),e("p",[t._v("样式计算的目的是为了计算出 "),e("code",[t._v("DOM")]),t._v(" 节点中每个元素的具体样式，这个阶段大体可分为三步来完成。")]),t._v(" "),e("h3",{attrs:{id:"_1-把-css-转换为浏览器能够理解的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-把-css-转换为浏览器能够理解的结构"}},[t._v("#")]),t._v(" 1. 把 "),e("code",[t._v("CSS")]),t._v(" 转换为浏览器能够理解的结构")]),t._v(" "),e("p",[t._v("浏览器无法直接理解这些纯文本的 "),e("code",[t._v("CSS")]),t._v("样式，所以当渲染引擎接收到 "),e("code",[t._v("CSS")]),t._v("文本时，会执行一个转换操作，将"),e("code",[t._v("CSS")]),t._v("文本转换为浏览器可以理解的结构—"),e("code",[t._v("styleSheets")]),t._v("。并且该结构同时具备了查询和修改功能")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("document.styleSheets")]),t._v("可以查看其结构")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(425),alt:"styleSheets"}})]),t._v(" "),e("h3",{attrs:{id:"_2-转换样式表中的属性值-使其标准化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-转换样式表中的属性值-使其标准化"}},[t._v("#")]),t._v(" 2. 转换样式表中的属性值，使其标准化")]),t._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2em"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" blue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("span")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-weight")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bold"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" green"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("上面的"),e("code",[t._v("CSS")]),t._v(" 文本中有很多属性值，如 "),e("code",[t._v("2em")]),t._v("、"),e("code",[t._v("blue")]),t._v("、"),e("code",[t._v("bold")]),t._v("，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是"),e("strong",[t._v("属性值标准化")]),t._v("。\n"),e("img",{attrs:{src:a(426),alt:"css-standard"}})]),t._v(" "),e("h3",{attrs:{id:"_3-计算出-dom-树中每个节点的具体样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算出-dom-树中每个节点的具体样式"}},[t._v("#")]),t._v(" 3. 计算出 "),e("code",[t._v("DOM")]),t._v(" 树中每个节点的具体样式")]),t._v(" "),e("p",[t._v("根据"),e("code",[t._v("CSS")]),t._v(" 的继承规则和层叠规则计算")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("继承规则")]),t._v("就是每个"),e("code",[t._v("DOM")]),t._v("节点都包含有父节点的样式")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(427),alt:"inherit"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(428),alt:"element"}})]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("层叠规则")]),t._v("是一个定义了如何合并来自多个源的属性值的算法。")])]),t._v(" "),e("p",[t._v("这个阶段最终输出的内容是每个 "),e("code",[t._v("DOM")]),t._v("节点的样式，并被保存在"),e("code",[t._v("ComputedStyle")]),t._v("的结构内。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(429),alt:"ComputedStyle"}})]),t._v(" "),e("h2",{attrs:{id:"布局阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布局阶段"}},[t._v("#")]),t._v(" 布局阶段")]),t._v(" "),e("p",[t._v("算出 "),e("code",[t._v("DOM")]),t._v("树中可见元素的几何位置，我们把这个计算过程叫做布局。")]),t._v(" "),e("p",[e("code",[t._v("Chrome")]),t._v(" 在布局阶段需要完成两个任务：创建布局树和布局计算。")]),t._v(" "),e("h3",{attrs:{id:"_1-创建布局树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建布局树"}},[t._v("#")]),t._v(" 1. 创建布局树")]),t._v(" "),e("p",[e("code",[t._v("DOM")]),t._v("树含有很多不可见的元素，比如 "),e("code",[t._v("head")]),t._v(" 标签，还有使用了 "),e("code",[t._v("display:none")]),t._v(" 属性的元素。所以在显示之前，我们还要额外地构建一棵只包含可见元素布局树。")]),t._v(" "),e("blockquote",[e("p",[t._v("只包含可见元素布局树")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(430),alt:"layout-tree"}})]),t._v(" "),e("p",[t._v("浏览器大体上完成了下面这些工作：")]),t._v(" "),e("ul",[e("li",[t._v("遍历 "),e("code",[t._v("DOM")]),t._v(" 树中的所有可见节点，并把这些节点加到布局中")]),t._v(" "),e("li",[t._v("不可见的节点会被布局树忽略掉")])]),t._v(" "),e("h3",{attrs:{id:"_2-布局计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-布局计算"}},[t._v("#")]),t._v(" 2. 布局计算")]),t._v(" "),e("p",[t._v("在执行布局操作的时候，会把布局运算的结果重新写回布局树中，所以布局树既是输入内容也是输出内容，这是布局阶段一个不合理的地方，因为在布局阶段并没有清晰地将输入内容和输出内容区分开来。针对这个问题，"),e("code",[t._v("Chrome")]),t._v(" 团队正在重构布局代码，下一代布局系统叫 "),e("code",[t._v("LayoutNG")]),t._v("，试图更清晰地分离输入和输出，从而让新设计的布局算法更加简单。")]),t._v(" "),e("h2",{attrs:{id:"分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),e("p",[t._v("渲染引擎为特定的节点生成专用的图层，并生成一棵对应的图层树（"),e("code",[t._v("LayerTree")]),t._v("）")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("Chrome")]),t._v("开发者工具选择"),e("code",[t._v("Layers")]),t._v("标签，可以查看可视化页面的分层情况")])]),t._v(" "),e("p",[t._v("渲染引擎给页面分了很多图层，这些图层按照一定顺序叠加在一起,就形成了最终的页面")]),t._v(" "),e("blockquote",[e("p",[t._v("图层和布局树节点之间的关系")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(431),alt:"layer"}})]),t._v(" "),e("p",[t._v("并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。每一个节点都会直接或者间接地从属于一个层。")]),t._v(" "),e("p",[t._v("渲染引擎会为特定的节点创建新的层,通常满足下面两点中任意一点的元素就可以被提升为单独的一个图层。")]),t._v(" "),e("h3",{attrs:{id:"拥有层叠上下文属性的元素会被提升为单独的一层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拥有层叠上下文属性的元素会被提升为单独的一层"}},[t._v("#")]),t._v(" 拥有层叠上下文属性的元素会被提升为单独的一层")]),t._v(" "),e("p",[t._v("页面是个二维平面，但是层叠上下文能够让 "),e("code",[t._v("HTML")]),t._v("元素具有三维概念，这些 "),e("code",[t._v("HTML")]),t._v(" 元素按照自身属性的优先级分布在垂直于这个二维平面的 "),e("code",[t._v("z")]),t._v("轴上")]),t._v(" "),e("p",[e("img",{attrs:{src:a(432),alt:"stacking-context"}})]),t._v(" "),e("p",[t._v("明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等，都拥有层叠上下文属性。")]),t._v(" "),e("h3",{attrs:{id:"需要剪裁-clip-的地方也会被创建为图层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需要剪裁-clip-的地方也会被创建为图层"}},[t._v("#")]),t._v(" 需要剪裁（"),e("code",[t._v("clip")]),t._v("）的地方也会被创建为图层")]),t._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token style"}},[e("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n  "),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("overflow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" auto"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gray"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图：\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      从上图我们可以看到，document 层上有 A 和 B 层，而 B\n      层之上又有两个图层。这些图层组织在一起也是一颗树状结构。\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update\n      LayerTree）。\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("p",[t._v("出现这种裁剪情况的时候，渲染引擎会为文字部分单独创建一个层，如果出现滚动条，滚动条也会被提升为单独的层。")]),t._v(" "),e("h2",{attrs:{id:"图层绘制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[t._v("#")]),t._v(" 图层绘制")]),t._v(" "),e("p",[t._v("试想一下，如果给你一张纸，让你先把纸的背景涂成蓝色，然后在中间位置画一个红色的圆，最后再在圆上画个绿色三角形。你会怎么操作呢？")]),t._v(" "),e("p",[t._v("通常，你会把你的绘制操作分解为三步：")]),t._v(" "),e("ul",[e("li",[t._v("绘制蓝色背景；")]),t._v(" "),e("li",[t._v("在中间绘制一个红色的圆；")]),t._v(" "),e("li",[t._v("再在圆上绘制绿色三角形。")])]),t._v(" "),e("p",[t._v("渲染引擎实现图层的绘制与之类似，会把一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表，如下图所示：\n"),e("img",{attrs:{src:a(433),alt:"draw"}})]),t._v(" "),e("p",[t._v("从图中可以看出，绘制列表中的指令其实非常简单，就是让其执行一个简单的绘制操作，比如绘制粉色矩形或者黑色的线等。而绘制一个元素通常需要好几条绘制指令，因为每个元素的背景、前景、边框都需要单独的指令去绘制。所以在图层绘制阶段，输出的内容就是这些待绘制列表。")]),t._v(" "),e("blockquote",[e("p",[t._v("打开"),e("code",[t._v("Layers")]),t._v("标签，选择"),e("code",[t._v("document")]),t._v("层，来实际体验下绘制列表，如下图所示：")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(434),alt:"draw-list"}})]),t._v(" "),e("blockquote",[e("p",[t._v("区域 1 就是 "),e("code",[t._v("document")]),t._v(" 的绘制列表，拖动区域 2 中的进度条可以重现列表的绘制过程。")])]),t._v(" "),e("h2",{attrs:{id:"栅格化-raster-操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栅格化-raster-操作"}},[t._v("#")]),t._v(" 栅格化（raster）操作")]),t._v(" "),e("p",[t._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。可以结合下图来看下渲染主线程和合成线程之间的关系：\n"),e("img",{attrs:{src:a(435),alt:"compound"}})]),t._v(" "),e("p",[t._v("当图层的绘制列表准备好之后，主线程会把该绘制列表提交（"),e("code",[t._v("commit")]),t._v("）给合成线程")]),t._v(" "),e("p",[t._v("通常一个页面可能很大，但是用户只能看到其中的一部分，我们把用户可以看到的这个部分叫做视口（"),e("code",[t._v("viewport")]),t._v("）。\n"),e("img",{attrs:{src:a(436),alt:"viewport"}})]),t._v(" "),e("p",[t._v("在有些情况下，有的图层可以很大，比如有的页面使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。基于这个原因，合成线程会将图层划分为图块（"),e("code",[t._v("tile")]),t._v("），这些图块的大小通常是 "),e("code",[t._v("256x256")]),t._v(" 或者 "),e("code",[t._v("512x512")]),t._v("，如下图所示：\n"),e("img",{attrs:{src:a(437),alt:"tile"}})]),t._v(" "),e("p",[t._v("合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(438),alt:"raster-thread-pool"}})]),t._v(" "),e("p",[t._v("通常，栅格化过程都会使用"),e("code",[t._v("GPU")]),t._v("来加速生成，使用 "),e("code",[t._v("GPU")]),t._v(" 生成位图的过程叫快速栅格化，或者 "),e("code",[t._v("GPU")]),t._v("栅格化，生成的位图被保存在"),e("code",[t._v("GPU")]),t._v("内存中。")]),t._v(" "),e("p",[e("code",[t._v("GPU")]),t._v("操作是运行在"),e("code",[t._v("GPU")]),t._v("进程中，如果栅格化操作使用了 "),e("code",[t._v("GPU")]),t._v("，那么最终生成位图的操作是在 "),e("code",[t._v("GPU")]),t._v(" 中完成的，这就涉及到了跨进程操作。具体形式你可以参考下图：\n"),e("img",{attrs:{src:a(439),alt:"render-gpu"}}),t._v("\n渲染进程把生成图块的指令发送给"),e("code",[t._v("GPU")]),t._v("，然后在"),e("code",[t._v("GPU")]),t._v("中执行生成图块的位图，并保存在 "),e("code",[t._v("GPU")]),t._v(" 的内存中。")]),t._v(" "),e("h2",{attrs:{id:"合成和显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[t._v("#")]),t._v(" 合成和显示")]),t._v(" "),e("p",[t._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——"),e("code",[t._v("DrawQuad")]),t._v("，然后将该命令提交给浏览器进程。\n浏览器进程里面有一个叫 "),e("code",[t._v("viz")]),t._v(" 的组件，用来接收合成线程发过来的 "),e("code",[t._v("DrawQuad")]),t._v(" 命令，然后根据 "),e("code",[t._v("DrawQuad")]),t._v(" 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。")]),t._v(" "),e("h2",{attrs:{id:"渲染流水线大总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线大总结"}},[t._v("#")]),t._v(" 渲染流水线大总结")]),t._v(" "),e("p",[e("img",{attrs:{src:a(440),alt:"full-render-pipeline"}})]),t._v(" "),e("ol",[e("li",[t._v("渲染进程将 "),e("code",[t._v("HTML")]),t._v(" 内容转换为能够读懂的"),e("code",[t._v("DOM")]),t._v(" 树结构。")]),t._v(" "),e("li",[t._v("渲染引擎将 "),e("code",[t._v("CSS")]),t._v(" 样式表转化为浏览器可以理解的\n"),e("code",[t._v("styleSheets")]),t._v("，计算出 "),e("code",[t._v("DOM")]),t._v(" 节点的样式。")]),t._v(" "),e("li",[t._v("创建布局树，并计算元素的布局信息。")]),t._v(" "),e("li",[t._v("对布局树进行分层，并生成分层树。")]),t._v(" "),e("li",[t._v("为每个图层生成绘制列表，并将其提交到合成线程。")]),t._v(" "),e("li",[t._v("合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。")]),t._v(" "),e("li",[t._v("成线程发送绘制图块命令"),e("code",[t._v("DrawQuad")]),t._v("给浏览器进程。")]),t._v(" "),e("li",[t._v("浏览器进程根据 "),e("code",[t._v("DrawQuad")]),t._v(" 消息生成页面，并显示到显示器上。")])]),t._v(" "),e("h2",{attrs:{id:"相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),e("h3",{attrs:{id:"更新了元素的几何属性-重排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新了元素的几何属性-重排"}},[t._v("#")]),t._v(" 更新了元素的几何属性（重排）")]),t._v(" "),e("p",[e("img",{attrs:{src:a(441),alt:"reset"}}),t._v("\n如果通过 "),e("code",[t._v("JavaScript")]),t._v(" 或者 "),e("code",[t._v("CSS")]),t._v("修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫重排。无疑，重排需要更新完整的渲染流水线，所以开销也是最大的。")]),t._v(" "),e("h3",{attrs:{id:"更新元素的绘制属性-重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新元素的绘制属性-重绘"}},[t._v("#")]),t._v(" 更新元素的绘制属性（重绘）")]),t._v(" "),e("p",[e("img",{attrs:{src:a(442),alt:"redraw"}}),t._v("\n如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫重绘。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。")]),t._v(" "),e("h3",{attrs:{id:"直接合成阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接合成阶段"}},[t._v("#")]),t._v(" 直接合成阶段")]),t._v(" "),e("p",[t._v("如果更改一个既不要布局也不要绘制的属性，渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做合成。具体流程参考下图：\n"),e("img",{attrs:{src:a(443),alt:"synthesis"}})]),t._v(" "),e("p",[t._v("在上图中，我们使用了 "),e("code",[t._v("CSS")]),t._v(" 的"),e("code",[t._v("transform")]),t._v("来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的，因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以相对于重绘和重排，合成能大大提升绘制效率。")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("简化遇到的问题,将复杂的问题简单化,从而最终真正解决问题")])])}),[],!1,null,null,null);s.default=n.exports}}]);